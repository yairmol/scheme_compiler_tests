#use "topfind";;
#directory "../";;
#directory "../..";;
#use "tag-parser.ml";;

(* tests for Applic *)
let applic_test_suite = [
  ("let expansion test 1", Tag_Parser.tag_parse_expressions [Pair (Symbol "let", Pair (Pair (Pair (Symbol "x", Pair (Number (Fraction (1, 1)), Nil)), Pair (Pair (Symbol "y", Pair (Number (Fraction (2, 1)), Nil)), Nil)), Pair (Symbol "y", Nil)))], [Applic (LambdaSimple (["x"; "y"], Var "y"),[Const (Sexpr (Number (Fraction (1, 1)))); Const (Sexpr (Number (Fraction (2, 1))))])]);
  ("let expansion test 2", Tag_Parser.tag_parse_expressions [Pair (Symbol "let", Pair (Nil, Pair (Number (Fraction (10, 1)), Nil)))], [Applic (LambdaSimple ([], Const (Sexpr (Number (Fraction (10, 1))))), [])]);
  ("let expansion test 3", Tag_Parser.tag_parse_expressions [Pair (Symbol "let", Pair (Pair (Pair (Symbol "x", Pair (Number (Fraction (1, 1)), Nil)), Nil), Pair (Symbol "x", Nil)))], [Applic (LambdaSimple (["x"], Var "x"), [Const (Sexpr (Number (Fraction (1, 1))))])]);
  ("let expansion test 4", Tag_Parser.tag_parse_expressions [Pair (Symbol "let", Pair (Nil, Pair (Pair (Symbol "begin", Pair (Number (Fraction (1, 1)), Pair (Number (Fraction (2, 1)), Pair (Number (Fraction (3, 1)), Nil)))), Nil)))], [Applic(LambdaSimple ([],Seq[Const (Sexpr (Number (Fraction (1, 1)))); Const (Sexpr (Number (Fraction (2, 1))));Const (Sexpr (Number (Fraction (3, 1))))]),[])]);
  ("let expansion test 5", Tag_Parser.tag_parse_expressions [Pair (Symbol "let", Pair (Pair (Pair (Symbol "a", Pair (Number (Fraction (3, 1)), Nil)), Pair (Pair (Symbol "b", Pair (Number (Fraction (10, 1)), Nil)), Nil)), Pair (Pair (Symbol "+", Pair (Symbol "a", Pair (Symbol "b", Nil))), Nil)))], [Applic (LambdaSimple (["a"; "b"], Applic (Var "+", [Var "a"; Var "b"])),[Const (Sexpr (Number (Fraction (3, 1)))); Const (Sexpr (Number (Fraction (10, 1))))])]);
  ("let expansion test 6", Tag_Parser.tag_parse_expressions [Pair (Symbol "let", Pair (Pair (Pair (Symbol "x", Pair (Char 'a', Nil)), Nil), Pair (Symbol "x", Nil)))], [Applic (LambdaSimple (["x"], Var "x"), [Const (Sexpr (Char 'a'))])]);
  ("let expansion test 7", Tag_Parser.tag_parse_expressions [Pair (Symbol "let", Pair (Pair (Pair (Symbol "t", Pair (Bool true, Nil)), Pair (Pair (Symbol "th", Pair (Number (Fraction (3, 1)), Nil)), Pair (Pair (Symbol "el", Pair (Number (Fraction (4, 1)), Nil)), Nil))), Pair (Pair (Symbol "if", Pair (Symbol "t", Pair (Symbol "th", Pair (Symbol "el", Nil)))), Nil)))], [Applic (LambdaSimple (["t"; "th"; "el"], If (Var "t", Var "th", Var "el")),[Const (Sexpr (Bool true)); Const (Sexpr (Number (Fraction (3, 1))));Const (Sexpr (Number (Fraction (4, 1))))])]);
  ("let expansion test 8", Tag_Parser.tag_parse_expressions [Pair (Symbol "let", Pair (Pair (Pair (Symbol "x", Pair (String "asd", Nil)), Nil), Pair (Pair (Symbol "define", Pair (Symbol "y", Pair (Number (Float 1.23), Nil))), Nil)))], [Applic(LambdaSimple (["x"], Def (Var "y", Const (Sexpr (Number (Float 1.23))))),[Const (Sexpr (String "asd"))])]);
  ("let expansion test 9", Tag_Parser.tag_parse_expressions [Pair (Symbol "let", Pair (Pair (Pair (Symbol "x", Pair (String "asd", Nil)), Nil), Pair (Pair (Symbol "begin", Pair (Pair (Symbol "define", Pair (Symbol "y", Pair (Number (Float 1.23), Nil))), Pair (Pair (Symbol "set", Pair (Symbol "y", Pair (Number (Fraction (-1, 1)), Nil))), Nil))), Nil)))], [Applic(LambdaSimple (["x"],Seq[Def (Var "y", Const (Sexpr (Number (Float 1.23))));Applic (Var "set", [Var "y"; Const (Sexpr (Number (Fraction (-1, 1))))])]),[Const (Sexpr (String "asd"))])]);
  ("let expansion test 10", Tag_Parser.tag_parse_expressions [Pair (Symbol "let", Pair (Pair (Pair (Symbol "x", Pair (String "asd", Nil)), Nil), Pair (Pair (Symbol "begin", Pair (Symbol "x", Nil)), Nil)))], [Applic (LambdaSimple (["x"], Var "x"), [Const (Sexpr (String "asd"))])]);
  ("let* expansion test 1", Tag_Parser.tag_parse_expressions [Pair (Symbol "let*", Pair(Pair (Pair (Symbol "x", Pair (Number (Fraction (1, 1)), Nil)),Pair (Pair (Symbol "y", Pair (Number (Fraction (2, 1)), Nil)), Nil)),Pair (Symbol "y", Nil)))], [Applic(LambdaSimple (["x"],Applic (LambdaSimple (["y"], Var "y"), [Const (Sexpr (Number (Fraction (2, 1))))])),[Const (Sexpr (Number (Fraction (1, 1))))])]);
  ("let* expansion test 2", Tag_Parser.tag_parse_expressions [Pair (Symbol "let*", Pair(Pair (Pair (Symbol "x", Pair (Number (Fraction (1, 1)), Nil)),Pair (Pair (Symbol "y", Pair (Number (Fraction (2, 1)), Nil)),Pair (Pair (Symbol "z", Pair (Number (Fraction (3, 1)), Nil)),Pair (Pair (Symbol "a", Pair (Number (Fraction (4, 1)), Nil)),Pair (Pair (Symbol "b", Pair (Number (Fraction (5, 1)), Nil)),Pair (Pair (Symbol "c", Pair (Number (Fraction (6, 1)), Nil)), Nil)))))),Pair(Pair (Symbol "begin",Pair (Symbol "x",Pair (Symbol "y",Pair (Symbol "z",Pair (Symbol "a", Pair (Symbol "b", Pair (Symbol "c", Nil))))))),Nil)))], [Applic(LambdaSimple (["x"],Applic(LambdaSimple (["y"],Applic(LambdaSimple (["z"],Applic(LambdaSimple (["a"],Applic(LambdaSimple (["b"],Applic(LambdaSimple (["c"],Seq [Var "x"; Var "y"; Var "z"; Var "a"; Var "b"; Var "c"]),[Const (Sexpr (Number (Fraction (6, 1))))])),[Const (Sexpr (Number (Fraction (5, 1))))])),[Const (Sexpr (Number (Fraction (4, 1))))])),[Const (Sexpr (Number (Fraction (3, 1))))])),[Const (Sexpr (Number (Fraction (2, 1))))])),[Const (Sexpr (Number (Fraction (1, 1))))])]);
  ("let* expansion test 3", Tag_Parser.tag_parse_expressions [Pair (Symbol "let*", Pair(Pair (Pair (Symbol "a", Pair (Number (Fraction (1, 1)), Nil)),Pair (Pair (Symbol "b", Pair (Number (Fraction (2, 1)), Nil)),Pair (Pair (Symbol "c", Pair (Number (Fraction (3, 1)), Nil)),Pair (Pair (Symbol "d", Pair (Number (Fraction (4, 1)), Nil)),Pair (Pair (Symbol "e", Pair (Number (Fraction (5, 1)), Nil)),Pair (Pair (Symbol "f", Pair (Number (Fraction (5, 1)), Nil)),Pair (Pair (Symbol "g", Pair (Number (Fraction (6, 1)), Nil)), Nil))))))),Pair(Pair (Symbol "and",Pair (Symbol "a",Pair (Symbol "b",Pair (Symbol "c",Pair (Symbol "d",Pair (Symbol "e", Pair (Symbol "f", Pair (Symbol "g", Nil)))))))),Nil)))], [Applic(LambdaSimple (["a"],Applic(LambdaSimple (["b"],Applic(LambdaSimple (["c"],Applic(LambdaSimple (["d"],Applic(LambdaSimple (["e"],Applic(LambdaSimple (["f"],Applic(LambdaSimple (["g"],If (Var "a",If (Var "b",If (Var "c",If (Var "d",If (Var "e",If (Var "f", Var "g", Const (Sexpr (Bool false))),Const (Sexpr (Bool false))),Const (Sexpr (Bool false))),Const (Sexpr (Bool false))),Const (Sexpr (Bool false))),Const (Sexpr (Bool false)))),[Const (Sexpr (Number (Fraction (6, 1))))])),[Const (Sexpr (Number (Fraction (5, 1))))])),[Const (Sexpr (Number (Fraction (5, 1))))])),[Const (Sexpr (Number (Fraction (4, 1))))])),[Const (Sexpr (Number (Fraction (3, 1))))])),[Const (Sexpr (Number (Fraction (2, 1))))])),[Const (Sexpr (Number (Fraction (1, 1))))])]);
  ("let* expansion test 4", Tag_Parser.tag_parse_expressions [Pair (Symbol "let*", Pair (Nil,Pair(Pair (Symbol "begin",Pair (Number (Fraction (1, 1)), Pair (Number (Fraction (2, 1)), Pair (Number (Fraction (3, 1)), Nil)))),Nil)))], [Applic(LambdaSimple ([],Seq[Const (Sexpr (Number (Fraction (1, 1)))); Const (Sexpr (Number (Fraction (2, 1))));Const (Sexpr (Number (Fraction (3, 1))))]),[])]);
  ("let* expansion test 5", Tag_Parser.tag_parse_expressions [Pair (Symbol "let*", Pair(Pair (Pair (Symbol "a", Pair (Number (Fraction (3, 1)), Nil)),Pair (Pair (Symbol "b", Pair (Number (Fraction (10, 1)), Nil)), Nil)),Pair (Pair (Symbol "+", Pair (Symbol "a", Pair (Symbol "b", Nil))), Nil)))], [Applic(LambdaSimple (["a"],Applic (LambdaSimple (["b"], Applic (Var "+", [Var "a"; Var "b"])),[Const (Sexpr (Number (Fraction (10, 1))))])),[Const (Sexpr (Number (Fraction (3, 1))))])]);
  ("let* expansion test 6", Tag_Parser.tag_parse_expressions [Pair (Symbol "let*", Pair (Pair (Pair (Symbol "x", Pair (Char 'a', Nil)), Nil),Pair (Symbol "x", Nil)))], [Applic (LambdaSimple (["x"], Var "x"), [Const (Sexpr (Char 'a'))])]);
  ("let* expansion test 7", Tag_Parser.tag_parse_expressions [Pair (Symbol "let*", Pair(Pair (Pair (Symbol "t", Pair (Bool true, Nil)),Pair (Pair (Symbol "th", Pair (Number (Fraction (3, 1)), Nil)),Pair (Pair (Symbol "el", Pair (Number (Fraction (4, 1)), Nil)), Nil))),Pair(Pair (Symbol "if",Pair (Bool true, Pair (Number (Fraction (3, 1)), Pair (Number (Fraction (4, 1)), Nil)))),Nil)))], [Applic(LambdaSimple (["t"],Applic(LambdaSimple (["th"],Applic(LambdaSimple (["el"],If (Const (Sexpr (Bool true)), Const (Sexpr (Number (Fraction (3, 1)))),Const (Sexpr (Number (Fraction (4, 1)))))),[Const (Sexpr (Number (Fraction (4, 1))))])),[Const (Sexpr (Number (Fraction (3, 1))))])),[Const (Sexpr (Bool true))])]);
  ("let* expansion test 8", Tag_Parser.tag_parse_expressions [Pair (Symbol "let*", Pair (Pair (Pair (Symbol "x", Pair (String "asd", Nil)), Nil),Pair(Pair (Symbol "define", Pair (Symbol "y", Pair (Number (Float 12.3), Nil))),Nil)))], [Applic(LambdaSimple (["x"], Def (Var "y", Const (Sexpr (Number (Float 12.3))))),[Const (Sexpr (String "asd"))])]);
  ("let* expansion test 9", Tag_Parser.tag_parse_expressions [Pair (Symbol "let*", Pair (Pair (Pair (Symbol "x", Pair (String "asd", Nil)), Nil),Pair(Pair (Symbol "begin",Pair(Pair (Symbol "define",Pair (Symbol "y", Pair (Number (Float 1.23), Nil))),Pair(Pair (Symbol "set", Pair (Symbol "y", Pair (Number (Fraction (-1, 1)), Nil))),Nil))),Nil)))], [Applic(LambdaSimple (["x"],Seq[Def (Var "y", Const (Sexpr (Number (Float 1.23))));Applic (Var "set", [Var "y"; Const (Sexpr (Number (Fraction (-1, 1))))])]),[Const (Sexpr (String "asd"))])]);
  ("let* expansion test 10", Tag_Parser.tag_parse_expressions [Pair (Symbol "let*", Pair (Pair (Pair (Symbol "x", Pair (String "asd", Nil)), Nil),Pair (Pair (Symbol "begin", Pair (Symbol "x", Nil)), Nil)))], [Applic (LambdaSimple (["x"], Var "x"), [Const (Sexpr (String "asd"))])]);
];;
