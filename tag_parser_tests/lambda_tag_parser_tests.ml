#use "topfind";;
#directory "../";;
#directory "../..";;
#use "tag-parser.ml";;

(* tests for Lambda *)
let lambda_test_suite = [
  ("lambda_test_1", Tag_Parser.tag_parse_expressions [Pair (Symbol "lambda", Pair (Nil, Pair (Number (Fraction (10, 1)), Nil))) ], [LambdaSimple ([], Const (Sexpr (Number (Fraction (10, 1)))))]);
  ("lambda_test_2", Tag_Parser.tag_parse_expressions [Pair (Symbol "lambda", Pair (Pair (Symbol "a", Pair (Symbol "b", Nil)), Pair (Symbol "a", Nil))) ], [LambdaSimple (["a"; "b"], Var "a")]);
  ("lambda_test_3", Tag_Parser.tag_parse_expressions [Pair (Symbol "lambda", Pair (Pair (Symbol "a", Nil), Pair (Symbol "a", Nil))) ], [LambdaSimple (["a"], Var "a")]);
  ("lambda_test_4", Tag_Parser.tag_parse_expressions [Pair (Symbol "lambda", Pair (Pair (Symbol "x", Pair (Symbol "y", Nil)),Pair (Pair (Symbol "+", Pair (Symbol "x", Pair (Symbol "y", Nil))), Nil)))], [LambdaSimple (["x"; "y"], Applic (Var "+", [Var "x"; Var "y"]))]);
  ("lambda_test_5", Tag_Parser.tag_parse_expressions [Pair (Symbol "lambda", Pair (Pair (Symbol "x", Pair (Symbol "y", Pair (Symbol "z", Nil))),Pair(Pair (Symbol "if",Pair (Symbol "x", Pair (Symbol "y", Pair (Symbol "z", Nil)))),Nil)))], [LambdaSimple (["x"; "y"; "z"], If (Var "x", Var "y", Var "z"))]);
  ("lambda_test_6", Tag_Parser.tag_parse_expressions [Pair (Symbol "lambda", Pair (Pair (Symbol "x", Pair (Symbol "y", Pair (Symbol "z", Nil))),Pair(Pair (Symbol "begin",Pair (Symbol "x", Pair (Symbol "y", Pair (Symbol "z", Nil)))),Nil)))], [LambdaSimple (["x"; "y"; "z"], Seq [Var "x"; Var "y"; Var "z"])]);
  ("lambda_test_7", Tag_Parser.tag_parse_expressions [Pair (Symbol "lambda", Pair (Pair (Symbol "x", Pair (Symbol "y", Nil)),Pair (Pair (Symbol "set", Pair (Symbol "x", Pair (Symbol "y", Nil))), Nil)))], [LambdaSimple (["x"; "y"], Applic (Var "set", [Var "x"; Var "y"]))]);
  ("lambda_test_8", Tag_Parser.tag_parse_expressions [Pair (Symbol "lambda", Pair(Pair (Symbol "x",Pair (Symbol "y", Pair (Symbol "z", Pair (Symbol "w", Nil)))),Pair(Pair (Symbol "if",Pair (Symbol "x",Pair (Pair (Symbol "+", Pair (Symbol "y", Pair (Symbol "z", Nil))),Pair (Pair (Symbol "+", Pair (Symbol "z", Pair (Symbol "w", Nil))), Nil)))),Nil)))], [LambdaSimple (["x"; "y"; "z"; "w"],If (Var "x", Applic (Var "+", [Var "y"; Var "z"]),Applic (Var "+", [Var "z"; Var "w"])))]);
  ("lambda_test_9", Tag_Parser.tag_parse_expressions [Pair (Symbol "lambda", Pair (Pair (Symbol "x", Pair (Symbol "y", Nil)),Pair (Pair (Symbol "or", Pair (Pair (Symbol "x", Pair (Symbol "y", Pair (Symbol "z", Nil))), Nil)), Nil))) ], [LambdaSimple (["x"; "y"], Applic (Var "x", [Var "y"; Var "z"]))]);
  ("lambda_test_10", Tag_Parser.tag_parse_expressions [Pair (Symbol "lambda", Pair (Pair (Symbol "x", Pair (Symbol "y", Symbol "vs")),Pair(Pair (Symbol "begin",Pair (Symbol "x", Pair (Symbol "y", Pair (Symbol "vs", Nil)))),Nil)))], [LambdaOpt (["x"; "y"], "vs", Seq [Var "x"; Var "y"; Var "vs"])]);
  ("lambda_test_11", Tag_Parser.tag_parse_expressions [Pair (Symbol "lambda", Pair (Pair (Symbol "x", Symbol "vs"),Pair (Pair (Symbol "if", Pair (Symbol "x", Pair (Symbol "vs", Nil))), Nil)))], [LambdaOpt (["x"], "vs", If (Var "x", Var "vs", Const Void))]);
  ("lambda_test_12", Tag_Parser.tag_parse_expressions [Pair (Symbol "lambda", Pair (Pair (Symbol "x", Pair (Symbol "y", Symbol "vs")),Pair(Pair (Symbol "and",Pair (Number (Fraction (1, 1)), Pair (Number (Fraction (2, 1)), Pair (Number (Fraction (3, 1)), Nil)))),Nil)))], [LambdaOpt (["x"; "y"], "vs",If (Const (Sexpr (Number (Fraction (1, 1)))),If (Const (Sexpr (Number (Fraction (2, 1)))), Const (Sexpr (Number (Fraction (3, 1)))),Const (Sexpr (Bool false))),Const (Sexpr (Bool false))))]);
  ("lambda_test_13", Tag_Parser.tag_parse_expressions [Pair (Symbol "lambda", Pair(Pair (Symbol "a",Pair (Symbol "b", Pair (Symbol "c", Pair (Symbol "d", Symbol "vs")))),Pair(Pair (Symbol "if",Pair (Pair (Symbol ">", Pair (Symbol "a", Pair (Symbol "b", Nil))),Pair (Pair (Symbol "+", Pair (Symbol "c", Pair (Symbol "d", Nil))),Pair (Pair (Symbol "list", Pair (Symbol "vs", Nil)), Nil)))),Nil)))], [LambdaOpt (["a"; "b"; "c"; "d"], "vs",If (Applic (Var ">", [Var "a"; Var "b"]),Applic (Var "+", [Var "c"; Var "d"]), Applic (Var "list", [Var "vs"])))]);
  ("lambda_test_14", Tag_Parser.tag_parse_expressions [Pair (Symbol "lambda", Pair (Pair (Symbol "b", Symbol "vs"),Pair(Pair (Symbol "begin",Pair (Symbol "b",Pair(Pair (Symbol "define", Pair (Symbol "x", Pair (Number (Fraction (10, 1)), Nil))),Pair(Pair (Symbol "set",Pair (Symbol "b",Pair(Pair (Symbol "+", Pair (Symbol "x", Pair (Number (Fraction (15, 1)), Nil))),Nil))),Nil)))),Nil)))], [LambdaOpt (["b"], "vs",Seq[Var "b"; Def (Var "x", Const (Sexpr (Number (Fraction (10, 1)))));Applic (Var "set",[Var "b"; Applic (Var "+", [Var "x"; Const (Sexpr (Number (Fraction (15, 1))))])])])]);
  ("lambda_test_15", Tag_Parser.tag_parse_expressions [Pair (Symbol "lambda", Pair (Pair (Symbol "a", Pair (Symbol "b", Symbol "vs")),Pair(Pair (Symbol "cond",Pair (Pair (Symbol "a", Pair (Number (Fraction (1, 1)), Nil)),Pair (Pair (Symbol "b", Pair (Number (Fraction (2, 1)), Nil)),Pair(Pair (Symbol "else",Pair (Pair (Symbol "+", Pair (Symbol "a", Pair (Symbol "b", Nil))),Nil)),Nil)))),Nil)))], [LambdaOpt (["a"; "b"], "vs",If (Var "a", Const (Sexpr (Number (Fraction (1, 1)))),If (Var "b", Const (Sexpr (Number (Fraction (2, 1)))),Applic (Var "+", [Var "a"; Var "b"]))))]);
  ("lambda_test_16", Tag_Parser.tag_parse_expressions [Pair (Symbol "lambda", Pair (Pair (Symbol "x", Symbol "vs"), Pair (Symbol "vs", Nil))) ], [LambdaOpt (["x"], "vs", Var "vs")]);
  ("lambda_test_17", Tag_Parser.tag_parse_expressions [Pair (Symbol "lambda", Pair (Pair (Symbol "x", Pair (Symbol "y", Symbol "vs")),Pair(Pair(Pair (Symbol "quasiquote",Pair(Pair (Pair (Symbol "unquote", Pair (Symbol "x", Nil)),Pair (Pair (Symbol "unquote-splicing", Pair (Symbol "y", Nil)), Nil)),Nil)),Nil),Nil)))], [LambdaOpt (["x"; "y"], "vs",Applic(Applic (Var "cons",[Var "x"; Applic (Var "append", [Var "y"; Const (Sexpr Nil)])]),[]))]);
  ("lambda_test_18", Tag_Parser.tag_parse_expressions [Pair (Symbol "lambda", Pair (Pair (Symbol "x", Pair (Symbol "y", Symbol "vs")),Pair(Pair (Symbol "and",Pair (Symbol "x", Pair (Symbol "y", Pair (Symbol "vs", Nil)))),Nil)))], [LambdaOpt (["x"; "y"], "vs",If (Var "x", If (Var "y", Var "vs", Const (Sexpr (Bool false))),Const (Sexpr (Bool false))))]);
  ("lambda_test_19", Tag_Parser.tag_parse_expressions [Pair (Symbol "lambda",Pair (Pair (Symbol "a", Pair (Symbol "b", Pair (Symbol "c", Symbol "d"))),Pair(Pair (Symbol "quasiquote",Pair(Pair(Pair (Symbol "a",Pair (Pair (Symbol "unquote", Pair (Symbol "a", Nil)), Nil)),Pair(Pair (Symbol "b",Pair (Pair (Symbol "unquote", Pair (Symbol "b", Nil)), Nil)),Pair(Pair (Symbol "c",Pair (Pair (Symbol "unquote", Pair (Symbol "c", Nil)), Nil)),Pair(Pair (Symbol "d",Pair (Pair (Symbol "unquote", Pair (Symbol "d", Nil)), Nil)),Nil)))),Nil)),Nil)))], [LambdaOpt (["a"; "b"; "c"], "d",Applic (Var "cons",[Applic (Var "cons",[Const (Sexpr (Symbol "a"));Applic (Var "cons", [Var "a"; Const (Sexpr Nil)])]);Applic (Var "cons",[Applic (Var "cons",[Const (Sexpr (Symbol "b"));Applic (Var "cons", [Var "b"; Const (Sexpr Nil)])]);Applic (Var "cons",[Applic (Var "cons",[Const (Sexpr (Symbol "c"));Applic (Var "cons", [Var "c"; Const (Sexpr Nil)])]);Applic (Var "cons",[Applic (Var "cons",[Const (Sexpr (Symbol "d"));Applic (Var "cons", [Var "d"; Const (Sexpr Nil)])]);Const (Sexpr Nil)])])])]))]);
];;
